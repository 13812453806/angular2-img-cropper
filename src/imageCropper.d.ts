import { Point } from './model/point';
import { Bounds } from './model/bounds';
import { ImageCropperModel } from "./model/imageCropperModel";
import { CropperDrawSettings } from "./cropperDrawSettings";
export declare class ImageCropper extends ImageCropperModel {
    private crop;
    private drawSettings;
    constructor(x: number, y: number, width: number, height: number, croppedWidth: number, croppedHeight: number, drawSettings: CropperDrawSettings, keepAspect?: boolean, touchRadius?: number, minWidth?: number, minHeight?: number);
    static sign(x: any): any;
    static getMousePos(canvas: any, evt: any): Point;
    static getTouchPos(canvas: any, touch: any): Point;
    static detectVerticalSquash(img: any): number;
    prepare(canvas: HTMLCanvasElement): void;
    resizeCanvas(width: any, height: any): void;
    draw(ctx: any): void;
    dragCrop(x: any, y: any, marker: any): void;
    enforceMinSize(x: any, y: any, marker: any): Point;
    dragCorner(x: any, y: any, marker: any): void;
    getSide(a: any, b: any, c: any): any;
    handleRelease(newCropTouch: any): void;
    handleMove(newCropTouch: any): void;
    updateClampBounds(): void;
    getCropBounds(): Bounds;
    clampPosition(x: any, y: any): Point;
    isImageSet(): boolean;
    setImage(img: any): void;
    getCroppedImage(fillWidth?: number, fillHeight?: number): HTMLImageElement;
    getBounds(): Bounds;
    setBounds(bounds: any): void;
    onTouchMove(e: any): void;
    onMouseMove(e: any): void;
    move(cropTouch: any): void;
    getDragTouchForID(id: any): any;
    drawCursors(cropTouch: any): void;
    drawCornerCursor(marker: any, x: any, y: any): boolean;
    onTouchStart(): void;
    onTouchEnd(e: any): void;
    drawImageIOSFix(ctx: any, img: any, sx: any, sy: any, sw: any, sh: any, dx: any, dy: any, dw: any, dh: any): void;
    onMouseDown(): void;
    onMouseUp(): void;
}
